Most up-to-date version of instructions below --> ######...####

Required packages and installation:

cvs co -A HiggsAnalysis/CombinedLimit

Install MELA package according to instructions in https://twiki.cern.ch/twiki/bin/viewauth/CMS/MELAProject

cvs co -r bonato_supermela_20130129 -d ZZMatrixElement/SuperMELA  UserCode/CJLST/ZZMatrixElement/SuperMELA/
cvs co -r bonato_supermela_20121106 -d HZZ4L_Combination/CombinationPy/ UserCode/HZZ4L_Combination/CombinationPy

scram b -j7 #it will take >20 minutes



****************************
1) : calculate superMELA


-)the idea is to take in input the stat trees of CJLST (ask Mario, Cri and Nic)
and produce copies of the trees with additional branches including superMELA.
the susperMELA discriminant needs in input the Psig and Pbkg of MELA plus
the m4l analytical shapes of signal and background. 

Psig(MELA) and Pbkg(MELA) can be passed as inputs in case they were 
pre-calculated. For instance they can be read from the same stat trees in input. 
This is the default behaviour and it is fast.
Alternatively, they can be recalculated on the fly (slow because of analytical bkg shape!). 
Notice that in this way one can create a superMELA discriminant not just using MELA
plus m4l but using nloMELA plus m4l. You must change the source code of the 
class and switch to true the withPt and withY flags of the MELA computation
(and recompile, of course). 

The parameters of the m4l shape are read directly from the input cards
used by the combination package in HZZ4L_Combination/CombinationPy/CreateDatacards/SM_inputs_8TeV/
(or 7TeV, you can set where to go and read the input cards). 

WARNING #1 (2012/10/12): I had problems in interfacing the code to Matt's
class that calculates the theoretical width of the Higgs. This is used for
defining the m4l window in use. Since in any case we are not interested
to anything else than mH=125 or mH=126, I hard-coded these values. To be fixed.

-) for an example of how to use the SuperMELA class, refer to the macro:
test/prodSuperMELAKD.C

prodSuperMELAKD.C is what is used for the mass production for the signal separation,
starting from CJLST trees. There are other versions of the same macro,
taylored for the Z+jets Control Region and data. The same notes as for the
standard macro apply to them.
 
testSuperMELAKD.C is meant to be a simpler example but is outdated
in this moment.

-) in prodSuperMELAKD you set the input directory, the output directory,
the name of the samples to loop on and the sqrtS. These params are all
defined at the top of the macro. The version of CJLST trees in input
for this tag was '261012'. Then, in a root session:

[0] .x loadMELA.C
[1] .L prodSuperMELAKD.C++
[2] prodSuperMELAKD()

and you let it go.

****************************
2) : generate 2D templates

once you have flat trees containing superMELA, you can generate 2D templates
(TH2F) with superMELA and psMELA (or graviMELA). 

-) Use the macro HZZ4L_Combination/CombinationPy/AnalysisInputs/SuperMELA/generateTemplatesSMD.C
Edit the "Really important parameters" section at the top of the file. There are
more details in the comments next to the variables.
Also, you should change in the file AnalysisInputs/ConfigSMD.h the dirs with the
new trees with superMELA. Then it's just a matter of doing
root -q -b loadMELA.C generateTemplatesSMD.C+

-) there is another similar macro for the Z+jets CR generateTemplatesSMD_forCR.C
Make sure that the various settings (outdir, binning, smoothing procedure)
are consistent with the standard macro.

You may also need a dummy observed dataset with superMELA in it.
There is the script generateDummyObsDataSMD.C that does it. In a ROOT
session you compile it and then execute it passing as argument the 
desired integrated lumi. The code reads in the MC files and samples randomly
events out of them, according to the desired lumi.

-) for producing templates with supermela vs gravimela, you need to change
the name of the branch to be used as KD (it is in the 
"Really important parameters" section at the top of the file). 



****************************
3) : create cards and ws

Great, you have 2D templates with superMELA !!!
Now you have just to create cards and workspaces. For the time being 
I have only some temporary code that duplicates what is on CVS.
The short-medium term plan is to merge the superMELA stuff into it.
For the time being, you should copy in HZZ4L_Combination/CombinationPy/CreateDatacards/
some files from ZZMatrixElement/SuperMELA/

cd $CMSSW_BASE/src/
cp ZZMatrixElement/SuperMELA/scripts/datacardClassSMD.py  HZZ4L_Combination/CombinationPy/CreateDatacards/
cp ZZMatrixElement/SuperMELA/scripts/systematicsClassSMD.py  HZZ4L_Combination/CombinationPy/CreateDatacards/
cp ZZMatrixElement/SuperMELA/scripts/makeDCsandWSsSMD.py  HZZ4L_Combination/CombinationPy/CreateDatacards/
cd HZZ4L_Combination/CombinationPy/CreateDatacards/

You must set the correct flags and parameters in the default input cards in SM_inputs_8TeV 
for creating cards and ws suitable for hypothesis testing ! In particular, in order 
to properly activate the shape systematics, the input cards should have these settings:

### for hypothesis testing ###
doHypTest True
#altHypLabel _ALT
systematic CMS_zz4l_bkgMELA True
systematic CMS_zz4l_sigMELA True
systematic CMS_zz4l_mean False
systematic CMS_zz4l_sigma False
systematic CMS_zz4l_mean False
systematic CMS_zz4l_sigma False
systematic CMS_zz4l_n False
systematic CMS_zz4l_gamma False



Run it using makeDCsandWSsSMD.py instead of the usual makeDCsandWSs.py (example for 8TeV):
python makeDCsandWSsSMD.py -i SM_inputs_8TeV -a HypTest_smd_8TeV -b -t templates2D_smd_8TeV/ > output_HypTest_smd_8TeV.txt

This special version of datacardClass will produce cards to be used with Combine !


WARNING: the special scripts for making cards for Hyp separation is based on
the tag bonato_supermela_20121021 of the card-making package.
Make sure that there were no relevant updates on top of it. A better
solution thta does not force us to keep the packages in sync by hand
has to be worked out in the future.


******************************
4) run the signal separation
see UserCode/HZZ4L_Combination/CombinationPy/SignalSeparation/instructions.txt










##############################################################################
!!!!!!!!!!!
Checkout packages needed:
To get CMSSW_6_1_1
a) SCRAM_ARCH=slc5_amd64_gcc472
b) scram p CMSSW_6_1_1
c) cd CMSSW_6_1_1/src
d) cmsenv

HiggsAnalysis/CombinedLimit
From src directory do:
a) cvs co -r V03-01-00 HiggsAnalysis/CombinedLimit/

UserCode/HZZ4L_Combination/CombinationPy
From src directory do:
a) cvs co -d HiggsAnalysis/CombinationPy UserCode/HZZ4L_Combination/CombinationPy/


UserCode/CJLST/ZZMatrixElement/SuperMELA/
From src directory do:
a) cvs co -d CJLST/SuperMELA UserCode/CJLST/ZZMatrixElement/SuperMELA/

!!!!!!!!!!!!
CompileCode:
From src directory do:
a) scram b -j 4
b) cd HiggsAnalysis/CombinationPy/CreateDatacards
c) ./buildPackage.sh

!!!!!!!!!!!
Move required scripts to CombinationPy/CreateDatacards
From src directory do:
a) cp CJLST/SuperMELA/scripts/*SMD.py HiggsAnalysis/CombinationPy/CreateDatacards/
b) cp CJLST/SuperMELA/scripts/run.sh HiggsAnalysis/CombinationPy/CreateDatacards/


!!!!!!!!!!!!
Make a set of Templates:
From HiggsAnalysis/CombinationPy/AnalysisInputs/SuperMELA do:
a) mkdir ../../CreateDatacards/templates2D_0-_7TeV/
b) mkdir ../../CreateDatacards/templates2D_0-_8TeV/
Edit inputs in ConfigSMD.h
c) root -l -b -q "generateTemplatesSMD.C+(3,\"0-\")"
First is model index
Second is model label used in tempaltes2D_*_?TeV
d) root -l -b -q "generateTemplatesSMD_forCR.C+(3,\"0-\")"

!!!!!!!!!!!!
Modify input cards:

You must set the correct flags and parameters in the default input cards in SM_inputs_?TeV 
for creating cards and ws suitable for hypothesis testing ! In particular, in order 
to properly activate the shape systematics, the input cards should have these settings:

### for hypothesis testing ###
doHypTest True
#altHypLabel _ALT
systematic CMS_zz4l_bkgMELA True
systematic CMS_zz4l_sigMELA True
systematic CMS_zz4l_mean False
systematic CMS_zz4l_sigma False
systematic CMS_zz4l_mean False
systematic CMS_zz4l_sigma False
systematic CMS_zz4l_n False
systematic CMS_zz4l_gamma False


!!!!!!!!!!!!
Create observed data trees:
Use script:
CJLST/SuperMELA/scripts/create_dataobs.C

!!!!!!!!!!!!
Make Datacards & run Combine:
From HiggsAnalysis/CombinationPy/CreateDatacards do:
Edit run.sh for mass you would like to run on
Edit the files in HiggsAnalysis.CombinationPy/SignalSeparation
a) ./run.sh 0- 0 0  (for input options use: ./run.sh)
First is text label used in templates2D_*_?TeV
Second is model index... different than model index for generateTemaplates
Third is 0 for mu=1 and 1 for prefit mu

This script will create the datacards for 125 & 126
Then it will plot the results and print the qvalue, cls, and information about the toys.
